Resources:
  ConnectionsTable8000B8A1:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  ConnectHandlerServiceRole7E4A9B1F:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  ConnectHandlerServiceRoleDefaultPolicy7DE94863:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:DeleteItem'
            Effect: Allow
            Resource:
              - !GetAtt 
                - ConnectionsTable8000B8A1
                - Arn
              - !Ref 'AWS::NoValue'
        Version: 2012-10-17
      PolicyName: ConnectHandlerServiceRoleDefaultPolicy7DE94863
      Roles:
        - !Ref ConnectHandlerServiceRole7E4A9B1F
  ConnectHandler2FFD52D8:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');
                const ddb = new AWS.DynamoDB.DocumentClient();
                exports.handler = async function (event, context) {
                  try {
                    await ddb
                      .put({
                        TableName: process.env.table,
                        Item: {
                          connectionId: event.requestContext.connectionId,
                        },
                      })
                      .promise();
                  } catch (err) {
                    return {
                      statusCode: 500,
                    };
                  }
                  return {
                    statusCode: 200,
                  };
                };
      Role: !GetAtt 
        - ConnectHandlerServiceRole7E4A9B1F
        - Arn
      Environment:
        Variables:
          table: !Ref ConnectionsTable8000B8A1
      Handler: index.handler
      Runtime: nodejs14.x
    DependsOn:
      - ConnectHandlerServiceRoleDefaultPolicy7DE94863
      - ConnectHandlerServiceRole7E4A9B1F
  DisconnectHandlerServiceRoleE54F14F9:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  DisconnectHandlerServiceRoleDefaultPolicy1800B9E5:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:DeleteItem'
            Effect: Allow
            Resource:
              - !GetAtt 
                - ConnectionsTable8000B8A1
                - Arn
              - !Ref 'AWS::NoValue'
        Version: 2012-10-17
      PolicyName: DisconnectHandlerServiceRoleDefaultPolicy1800B9E5
      Roles:
        - !Ref DisconnectHandlerServiceRoleE54F14F9
  DisconnectHandlerCB7ED6F7:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');
                const ddb = new AWS.DynamoDB.DocumentClient();
                
                exports.handler = async function (event, context) {
                  await ddb
                    .delete({
                      TableName: process.env.table,
                      Key: {
                        connectionId: event.requestContext.connectionId,
                      },
                    })
                    .promise();
                  return {
                    statusCode: 200,
                  };
                };
      Role: !GetAtt 
        - DisconnectHandlerServiceRoleE54F14F9
        - Arn
      Environment:
        Variables:
          table: !Ref ConnectionsTable8000B8A1
      Handler: index.handler
      Runtime: nodejs14.x
    DependsOn:
      - DisconnectHandlerServiceRoleDefaultPolicy1800B9E5
      - DisconnectHandlerServiceRoleE54F14F9
  MessageHandlerServiceRoleDF05266A:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  MessageHandlerServiceRoleDefaultPolicyD818A6AA:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'dynamodb:BatchGetItem'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:Query'
              - 'dynamodb:GetItem'
              - 'dynamodb:Scan'
              - 'dynamodb:ConditionCheckItem'
            Effect: Allow
            Resource:
              - !GetAtt 
                - ConnectionsTable8000B8A1
                - Arn
              - !Ref 'AWS::NoValue'
          - Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:GetBucketPolicy'
              - 's3:PutBucketPolicy'
              - 's3:CreateBucket'
              - 's3:ListBucket'
              - 's3:ListAllMyBuckets'
            Effect: Allow
            Resource:
              - '*'
        Version: 2012-10-17
      PolicyName: MessageHandlerServiceRoleDefaultPolicyD818A6AA
      Roles:
        - !Ref MessageHandlerServiceRoleDF05266A
  SendMessageHandlerDFBBCD6B:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |-
          import os
          import json
          import uuid
          import base64
          
          import boto3
          
          dynamodb = boto3.resource('dynamodb')
          connections = dynamodb.Table(os.environ['table'])
          
          
          def lambda_handler(event, context):
              image = json.loads(event.get('body', '{}')).get('base_64_image')
              folder_name = json.loads(event.get('body', '{}')).get('folder_name')
          
              if image is None:
                  return {'statusCode': 500, 'body': 'image not specified'}
          
              if folder_name is None:
                  return {'statusCode': 500, 'body': 'folder_name not specified'}
          
              s3 = boto3.resource('s3')
              bucket = s3.Bucket(folder_name)
              try:
                  bucket.create(
                      CreateBucketConfiguration={
                          'LocationConstraint': 'ap-northeast-1'
                          },
                  )
              except s3.meta.client.exceptions.BucketAlreadyExists:
                  pass
          
              bucket.put_object(
                  Key=f'{uuid.uuid4()}.jpeg',
                  Body=convert_b64_string_to_bynary(image),
                  ContentType='image/jpeg'
              )
          
              domain_name = event.get('requestContext', {}).get('domainName')
              stage = event.get('requestContext', {}).get('stage')
          
              items = connections.scan(ProjectionExpression='connectionId').get('Items')
              if items is None:
                  return {'statusCode': 500, 'body': 'something went wrong'}
          
              apigw_management = boto3.client('apigatewaymanagementapi',
                                              endpoint_url=F"https://{domain_name}/{stage}")
              for item in items:
                  if item["connectionId"] != event.get('requestContext', {}).get('connectionId'):
                      try:
                          _ = apigw_management.post_to_connection(ConnectionId=item["connectionId"], Data=image)
                      except:
                          pass
          
              return {'statusCode': 200, 'body': 'ok'}
          
          
          def convert_b64_string_to_bynary(s):
              return base64.b64decode(s)

      Role: !GetAtt 
        - MessageHandlerServiceRoleDF05266A
        - Arn
      Environment:
        Variables:
          table: !Ref ConnectionsTable8000B8A1
      Handler: index.lambda_handler
      Runtime: python3.9
    DependsOn:
      - MessageHandlerServiceRoleDefaultPolicyD818A6AA
      - MessageHandlerServiceRoleDF05266A
  GetPhotoHandlerDFBBCD6B:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |-
          import json
          import base64
          
          import boto3
          
          
          def get_img_objs_in_bucket(bucket_name):
              s3 = boto3.resource('s3')
              bucket = s3.Bucket(bucket_name)
              img_keys = bucket.objects.all()
              return img_keys
          
          
          def get_img_from_s3(bucket_name, obj):
              s3 = boto3.client('s3')
              responce = s3.get_object(Bucket=bucket_name, Key=obj.key)
              body = responce['Body'].read()
              body = base64.b64encode(body).decode('utf-8')
              return body
          
          
          def lambda_handler(event, context):
              bucket_name = event.get('pathParameters').get('fordername')
              img_objs = get_img_objs_in_bucket(bucket_name)
              resp = []
              for obj in img_objs:
                  img = get_img_from_s3(bucket_name, obj)
                  resp.append(
                      {
                          "bucket": bucket_name,
                          "key": obj.key,
                          "img": f'data:image/jpeg;base64,{img}',
                      }
                  )
          
              print(resp)
              print(json.dumps(resp))
          
              return {
                'statusCode': 200,
                'headers': {"Access-Control-Allow-Origin": "http://localhost:3000"},
                'body': json.dumps(resp)
              }

      Role: !GetAtt 
        - MessageHandlerServiceRoleDF05266A
        - Arn
      Environment:
        Variables:
          table: !Ref ConnectionsTable8000B8A1
      Handler: index.lambda_handler
      Runtime: python3.9
    DependsOn:
      - MessageHandlerServiceRoleDefaultPolicyD818A6AA
      - MessageHandlerServiceRoleDF05266A
  GetPhotoAllHandlerDFBBCD6B:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |-
          import json
          
          import boto3
          
          
          def lambda_handler(event, context):
              resp = []
              s3 = boto3.resource('s3')
              for bucket in s3.buckets.all():
                  strings = bucket.name.split('-')
                  if len(strings) > 0 and strings[0] == 'ishinomakihackathon2022':
                      resp.append(
                          {
                              "folder_name": bucket.name
                          }
                      )
          
              return {
                'statusCode': 200, 
                'headers': {"Access-Control-Allow-Origin": "http://localhost:3000"},
                'body': json.dumps(resp)
              }

      Role: !GetAtt 
        - MessageHandlerServiceRoleDF05266A
        - Arn
      Environment:
        Variables:
          table: !Ref ConnectionsTable8000B8A1
      Handler: index.lambda_handler
      Runtime: python3.9
    DependsOn:
      - MessageHandlerServiceRoleDefaultPolicyD818A6AA
      - MessageHandlerServiceRoleDF05266A
  DefaultHandlerServiceRoleDF00569C:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  DefaultHandlerServiceRoleDefaultPolicy2F57C32F:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action: 'execute-api:ManageConnections'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:aws:execute-api:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*/*/POST/@connections/*'
          - Action: 'execute-api:ManageConnections'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:aws:execute-api:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*/*/GET/@connections/*'
        Version: 2012-10-17
      PolicyName: DefaultHandlerServiceRoleDefaultPolicy2F57C32F
      Roles:
        - !Ref DefaultHandlerServiceRoleDF00569C
  DefaultHandler604DF7AC:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');

                exports.handler = async function (event, context) {
                  let connectionInfo;
                  let connectionId = event.requestContext.connectionId;
                
                  const callbackAPI = new AWS.ApiGatewayManagementApi({
                    apiVersion: '2018-11-29',
                    endpoint:
                      event.requestContext.domainName + '/' + event.requestContext.stage,
                  });
                
                  try {
                    connectionInfo = await callbackAPI
                      .getConnection({ ConnectionId: event.requestContext.connectionId })
                      .promise();
                  } catch (e) {
                    console.log(e);
                  }
                
                  connectionInfo.connectionID = connectionId;
                
                  await callbackAPI
                    .postToConnection({
                      ConnectionId: event.requestContext.connectionId,
                      Data:
                        'Use the sendmessage route to send a message. Your info:' +
                        JSON.stringify(connectionInfo),
                    })
                    .promise();
                
                  return {
                    statusCode: 200,
                  };
                };
      Role: !GetAtt 
        - DefaultHandlerServiceRoleDF00569C
        - Arn
      Handler: index.handler
      Runtime: nodejs14.x
    DependsOn:
      - DefaultHandlerServiceRoleDefaultPolicy2F57C32F
      - DefaultHandlerServiceRoleDF00569C
  manageConnections7F91357B:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action: 'execute-api:ManageConnections'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:aws:execute-api:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*/*/POST/@connections/*'
        Version: 2012-10-17
      PolicyName: manageConnections7F91357B
      Roles:
        - !Ref MessageHandlerServiceRoleDF05266A
